---
name: Build assets for SimpleSAMLphp 2.0

on:  # yamllint disable-line rule:truthy
  push:
    branches: ['release-2.0']
    paths:
      - 'resources/**'
      - 'package.json'
      - 'package-lock.json'
  schedule:
    # Run every week on Sunday at 00:00 AM UTC
    - cron: '0 0 * * 0'

jobs:
  build:
    name: Build assets
    runs-on: ['ubuntu-latest']
    outputs:
      all_changed_and_modified_files: ${{ steps.changes.outputs.all_changed_and_modified_files }}

    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.ASSETS_COMMIT_TOKEN }}
          ref: release-2.0
          # Full git history is needed to get a proper
          # list of changed files within `super-linter`
          fetch-depth: 0

      - name: Install & build assets
        run: |
          npm clean-install
          npm audit fix
          npx browserslist@latest --update-db
          npm run build

      - name: Fix git safe.directory in container
        run: |
          mkdir -p /home/runner/work/_temp/_github_home
          printf "[safe]\n\tdirectory = /github/workspace" > /home/runner/work/_temp/_github_home/.gitconfig
          rm public/base/css/dummy.css
          touch public/base/css/other.css
          touch public/base/test.css

      # This step will evaluate the repo status and report the changes
      - name: Get changed files in the public folder
        id: changes
        uses: tj-actions/changed-files@v34
#        with:
#          files: public/**

      - name: Run step if any file(s) in the public folder changed
#        if: steps.changes.outputs.all_changed_and_modified_files != ''
        run: |
          echo "${{ steps.changes.outputs }}"
          for file in ${{ steps.changes.outputs.all_changed_and_modified_files }}; do
            echo "$file was changed"
          done

      - name: Zip artifact for deployment
        if: steps.changes.outputs.all_changed_and_modified_files != ''
        run: zip release.zip -r .

      - uses: actions/upload-artifact@v3
        if: steps.changes.outputs.all_changed_and_modified_files != ''
        with:
          name: build
          path: release.zip

  quality:
    name: Quality checks
    runs-on: ['ubuntu-latest']
    needs: build
    if: needs.build.outputs.all_changed_and_modified_files != ''

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: build

      - name: unzip artifact for deployment
        run: |
          unzip release.zip
          rm release.zip

      - name: Lint Code Base
        uses: github/super-linter/slim@v4
        env:
          VALIDATE_ALL_CODEBASE: true
          LINTER_RULES_PATH: 'tools/linters'
          VALIDATE_CSS: true
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_JSON: true
          VALIDATE_MARKDOWN: true
          VALIDATE_YAML: true
          VALIDATE_GITHUB_ACTIONS: true
          DEFAULT_BRANCH: release-2.0
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # CSS Linter will choke on generated assets
          FILTER_REGEX_EXCLUDE: 'public/.*'

  version:
    name: Determine next version
    runs-on: ['ubuntu-latest']
    needs: quality

    outputs:
      version: ${{ steps.asset_version.outputs.version }}

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: build

      - name: unzip artifact for deployment
        run: |
          unzip release.zip
          rm release.zip

      - uses: paulhatch/semantic-version@v5.0.0-beta
        id: asset_version
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"

          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"

          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"

          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}"

          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          change_path: "resources/** public/base/** package.json package-lock.json"

          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false

  commit:
    name: Commit changes
    needs: version
    runs-on: [ubuntu-latest]

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: build

      - name: unzip artifact for deployment
        run: |
          unzip release.zip
          rm release.zip

      - name: Add & Commit
        uses: EndBug/add-and-commit@v9.1.1
        with:
          # The arguments for the `git add` command (see the paragraph below for more info)
          # Default: '.'
          add: "['resources/*', 'public/*', 'package.json', 'package-lock.json']"

          # Determines the way the action fills missing author name and email. Three options are available:
          # - github_actor -> UserName <UserName@users.noreply.github.com>
          # - user_info -> Your Display Name <your-actual@email.com>
          # - github_actions -> github-actions <email associated with the github logo>
          # Default: github_actor
          default_author: github_actions

          # Arguments for the git fetch command. If set to false, the action won't fetch the repo.
          # For more info as to why fetching is usually recommended, please see the "Performance on large repos" FAQ.
          # Default: --tags --force
          fetch: false

          # The message for the commit.
          # Default: 'Commit from GitHub Actions (name of the workflow)'
          message: "Auto-rebuild assets\n\nskip-checks: true"

          # The way the action should handle pathspec errors from the add and remove commands.
          # Three options are available:
          # - ignore -> errors will be logged but the step won't fail
          # - exitImmediately -> the action will stop right away, and the step will fail
          # - exitAtEnd -> the action will go on, every pathspec error will be logged at the end, the step will fail.
          # Default: ignore
          pathspec_error_handling: exitImmediately

          # Arguments for the git tag command (the tag name always needs to be the first word not preceded by an hyphen)
          # Default: ''
          tag: "v${{ needs.version.outputs.version }}"
